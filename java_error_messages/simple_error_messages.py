"""
Catalog of 'simple' error messages -- messages that do NOT have placeholders, and thus,
are presented verbatim to users.

These messages were mined from:
https://github.com/openjdk/jdk/blob/0f2113cee79b9645105b4753c7d7eacb83b872c2/src/jdk.compiler/share/classes/com/sun/tools/javac/resources/compiler.properties
"""

SIMPLE_ERROR_MESSAGES = {
    "'.class' expected": "compiler.err.dot.class.expected",
    "'>' expected": "compiler.err.dc.gt.expected",
    "'_' used as an identifier\n(use of '_' as an identifier is forbidden for lambda parameters)": "compiler.err.underscore.as.identifier.in.lambda",
    "'catch' without 'try'": "compiler.err.catch.without.try",
    "'else' without 'if'": "compiler.err.else.without.if",
    "'extends' not allowed for @interfaces": "compiler.err.cant.extend.intf.annotation",
    "'finally' without 'try'": "compiler.err.finally.without.try",
    "'module' or 'open' expected": "compiler.err.expected.module.or.open",
    "'new' not allowed in an annotation": "compiler.err.new.not.allowed.in.annotation",
    "'opens' only allowed in strong modules": "compiler.err.no.opens.unless.strong",
    "'try' without 'catch', 'finally' or resource declarations": "compiler.err.try.without.catch.finally.or.resource.decls",
    "'void' type not allowed here": "compiler.err.void.not.allowed.here",
    "--add-modules ALL-MODULE-PATH can only be used when compiling the unnamed module or when compiling in the context of an automatic module": "compiler.err.addmods.all.module.path.invalid",
    "--enable-preview must be used with either -source or --release": "compiler.err.preview.without.source.or.release",
    "--module-source-path specified more than once with a pattern argument": "compiler.err.multiple.values.for.module.source.path",
    "-A requires an argument; use '-Akey' or '-Akey=value'": "compiler.err.empty.A.argument",
    "A ServiceLoader was not usable and is required for annotation processing.": "compiler.err.proc.no.service",
    "Error creating a service loader to load Processors.": "compiler.err.proc.service.problem",
    "Unexpected @FunctionalInterface annotation": "compiler.err.bad.functional.intf.anno",
    "a generic class may not extend java.lang.Throwable": "compiler.err.generic.throwable",
    "a type variable may not be followed by other bounds": "compiler.err.type.var.may.not.be.followed.by.other.bounds",
    "abstract methods cannot have a body": "compiler.err.abstract.meth.cant.have.body",
    "an enum annotation value must be an enum constant": "compiler.err.enum.annotation.must.be.enum.constant",
    "an enum switch case label must be the unqualified name of an enumeration constant": "compiler.err.enum.label.must.be.unqualified.enum",
    "annotation interface declaration not allowed here": "compiler.err.annotation.decl.not.allowed.here",
    "annotation interface not applicable to this kind of declaration": "compiler.err.annotation.type.not.applicable",
    "annotation value must be a class literal": "compiler.err.annotation.value.must.be.class.literal",
    "annotation value must be an annotation": "compiler.err.annotation.value.must.be.annotation",
    "annotation value not of an allowable type": "compiler.err.annotation.value.not.allowable.type",
    "annotation values must be of the form 'name=value'": "compiler.err.annotation.value.must.be.name.value",
    "annotations not allowed": "compiler.err.dc.ref.annotations.not.allowed",
    "anonymous class implements interface; cannot have arguments": "compiler.err.anon.class.impl.intf.no.args",
    "anonymous class implements interface; cannot have qualifier for new": "compiler.err.anon.class.impl.intf.no.qual.for.new",
    "anonymous class implements interface; cannot have type arguments": "compiler.err.anon.class.impl.intf.no.typeargs",
    "array creation with both dimension expression and initialization is illegal": "compiler.err.illegal.array.creation.both.dimension.and.initialization",
    "array dimension missing": "compiler.err.array.dimension.missing",
    "array type has too many dimensions": "compiler.err.limit.dimensions",
    "as of release 1.4, 'assert' is a keyword, and may not be used as an identifier": "compiler.err.assert.as.identifier",
    "as of release 5, 'enum' is a keyword, and may not be used as an identifier": "compiler.err.enum.as.identifier",
    "as of release 8, 'this' is allowed as the parameter name for the receiver type only\nwhich has to be the first parameter, and cannot be a lambda parameter": "compiler.err.this.as.identifier",
    "as of release 9, '_' is a keyword, and may not be used as an identifier": "compiler.err.underscore.as.identifier",
    "attempt to break out of a switch expression": "compiler.err.break.outside.switch.expression",
    "attempt to continue out of a switch expression": "compiler.err.continue.outside.switch.expression",
    "attempt to return out of a switch expression": "compiler.err.return.outside.switch.expression",
    "bad HTML entity": "compiler.err.dc.bad.entity",
    "binary numbers must contain at least one binary digit": "compiler.err.invalid.binary.number",
    "break outside switch or loop": "compiler.err.break.outside.switch.loop",
    "call to super not allowed in enum constructor": "compiler.err.call.to.super.not.allowed.in.enum.ctor",
    "cannot assign to 'this'": "compiler.err.cant.assign.val.to.this",
    "cannot create array with '<>'": "compiler.err.cannot.create.array.with.diamond",
    "cannot create array with type arguments": "compiler.err.cannot.create.array.with.type.arguments",
    "cannot inherit from anonymous class": "compiler.err.cant.inherit.from.anon",
    "cannot select a static class from a parameterized type": "compiler.err.cant.select.static.class.from.param.type",
    "cannot select from a type variable": "compiler.err.type.var.cant.be.deref",
    "cannot specify both --source-path and --module-source-path": "compiler.err.sourcepath.modulesourcepath.conflict",
    "class output directory must be specified if -m option is used": "compiler.err.output.dir.must.be.specified.with.dash.m.option",
    "class, interface or enum declaration not allowed here": "compiler.err.class.not.allowed",
    "classes cannot directly extend java.lang.Enum": "compiler.err.enum.no.subclassing",
    "code requires too much stack": "compiler.err.limit.stack",
    "code too large": "compiler.err.limit.code",
    "code too large for try statement": "compiler.err.limit.code.too.large.for.try.stmt",
    "constant expression required": "compiler.err.const.expr.req",
    "constant string expression required": "compiler.err.string.const.req",
    "constant string too long": "compiler.err.limit.string",
    "continue outside of loop": "compiler.err.cont.outside.loop",
    "default value only allowed in an annotation interface declaration": "compiler.err.default.allowed.in.intf.annotation.member",
    "different case kinds used in the switch": "compiler.err.switch.mixing.case.types",
    "duplicate case label": "compiler.err.duplicate.case.label",
    "duplicate default label": "compiler.err.duplicate.default.label",
    "duplicate total pattern": "compiler.err.duplicate.total.pattern",
    "element value must be a constant expression": "compiler.err.attribute.value.must.be.constant",
    "elements in annotation interface declarations cannot be generic methods": "compiler.err.intf.annotation.members.cant.have.type.params",
    "elements in annotation interface declarations cannot declare formal parameters": "compiler.err.intf.annotation.members.cant.have.params",
    "empty character literal": "compiler.err.empty.char.lit",
    "enum classes are not extensible": "compiler.err.enum.types.not.extensible",
    "enum classes may not be instantiated": "compiler.err.enum.cant.be.instantiated",
    "enum classes must not be local": "compiler.err.local.enum",
    "enum constant expected here": "compiler.err.enum.constant.expected",
    "enum constant not expected here": "compiler.err.enum.constant.not.expected",
    "enums cannot have finalize methods": "compiler.err.enum.no.finalize",
    "error: ": "compiler.err.error",
    "expected 'module'": "compiler.err.expected.module",
    "expression not allowed as annotation value": "compiler.err.expression.not.allowable.as.annotation.value",
    "field declaration must be static\n(consider replacing field with record component)": "compiler.err.record.cannot.declare.instance.fields",
    "file should be on source path, or on patch path for module": "compiler.err.file.sb.on.source.or.patch.path.for.module",
    "floating-point number too large": "compiler.err.fp.number.too.large",
    "floating-point number too small": "compiler.err.fp.number.too.small",
    "generic array creation": "compiler.err.generic.array.creation",
    "hexadecimal numbers must contain at least one hexadecimal digit": "compiler.err.invalid.hex.number",
    "identifier expected": "compiler.err.dc.identifier.expected",
    "illegal '.'": "compiler.err.illegal.dot",
    "illegal attempt to redefine an existing match binding": "compiler.err.match.binding.exists",
    "illegal combination of -processorpath and --processor-module-path": "compiler.err.processorpath.no.processormodulepath",
    "illegal escape character": "compiler.err.illegal.esc.char",
    "illegal fall-through from a pattern": "compiler.err.flows.through.from.pattern",
    "illegal fall-through to a pattern": "compiler.err.flows.through.to.pattern",
    "illegal forward reference": "compiler.err.illegal.forward.ref",
    "illegal line end in character literal": "compiler.err.illegal.line.end.in.char.lit",
    "illegal non-ASCII digit": "compiler.err.illegal.nonascii.digit",
    "illegal parenthesized expression": "compiler.err.illegal.parenthesized.expression",
    "illegal reference to static field from initializer": "compiler.err.illegal.enum.static.ref",
    "illegal start of expression": "compiler.err.illegal.start.of.expr",
    "illegal start of statement": "compiler.err.illegal.start.of.stmt",
    "illegal start of type": "compiler.err.illegal.start.of.type",
    "illegal text block open delimiter sequence, missing line terminator": "compiler.err.illegal.text.block.open",
    "illegal underscore": "compiler.err.illegal.underscore",
    "illegal unicode escape": "compiler.err.illegal.unicode.esc",
    "improperly formed type, some parameters are missing": "compiler.err.improperly.formed.type.param.missing",
    "improperly formed type, type arguments given on a raw type": "compiler.err.improperly.formed.type.inner.raw.param",
    "incorrect use of inline tag": "compiler.err.dc.bad.inline.tag",
    "initializer must be able to complete normally": "compiler.err.initializer.must.be.able.to.complete.normally",
    "initializers not allowed in interfaces": "compiler.err.initializer.not.allowed",
    "instance initializers not allowed in records": "compiler.err.instance.initializer.not.allowed.in.records",
    "integer number too large": "compiler.err.int.number.too.large",
    "interface abstract methods cannot have body": "compiler.err.intf.meth.cant.have.body",
    "interface expected here": "compiler.err.intf.expected.here",
    "interface not allowed here": "compiler.err.intf.not.allowed.here",
    "invalid method declaration; return type required": "compiler.err.invalid.meth.decl.ret.type.req",
    "invalid type for annotation interface element": "compiler.err.invalid.annotation.member.type",
    "invalid use of a restricted identifier 'yield'\n(to invoke a method called yield, qualify the yield with a receiver or type name)": "compiler.err.invalid.yield",
    "javac is split between multiple class loaders: check your configuration": "compiler.err.two.class.loaders.1",
    "lambda body is neither value nor void compatible": "compiler.err.lambda.body.neither.value.nor.void.compatible",
    "lambda expression not expected here": "compiler.err.unexpected.lambda",
    "legacy array notation not allowed on receiver parameter": "compiler.err.array.and.receiver",
    "legacy array notation not allowed on record components": "compiler.err.record.component.and.old.array.syntax",
    "legacy array notation not allowed on variable-arity parameter": "compiler.err.varargs.and.old.array.syntax",
    "malformed HTML": "compiler.err.dc.malformed.html",
    "malformed floating-point literal": "compiler.err.malformed.fp.lit",
    "method does not override or implement a method from a supertype": "compiler.err.method.does.not.override.superclass",
    "method reference not expected here": "compiler.err.unexpected.mref",
    "missing method body, or declare abstract": "compiler.err.missing.meth.body.or.decl.abstract",
    "missing return statement": "compiler.err.missing.ret.stmt",
    "module declarations should be in a file named module-info.java": "compiler.err.module.decl.sb.in.module-info.java",
    "module directive keyword or '}' expected": "compiler.err.invalid.module.directive",
    "module not found on module source path": "compiler.err.module.not.found.on.module.source.path",
    "module source path must be specified if -m option is used": "compiler.err.modulesourcepath.must.be.specified.with.dash.m.option",
    "native methods cannot have a body": "compiler.err.native.meth.cant.have.body",
    "no annotations are allowed in the type of a class literal": "compiler.err.no.annotations.on.dot.class",
    "no class output directory specified": "compiler.err.no.output.dir",
    "no content": "compiler.err.dc.no.content",
    "no interface expected here": "compiler.err.no.intf.expected.here",
    "no source files": "compiler.err.no.source.files",
    "no source files or class names": "compiler.err.no.source.files.classes",
    "no tag name after '@'": "compiler.err.dc.no.tag.name",
    "not a statement": "compiler.err.not.stmt",
    "not in a module on the module source path": "compiler.err.not.in.module.on.module.source.path",
    "package annotations should be in file package-info.java": "compiler.err.pkg.annotations.sb.in.package-info.java",
    "package declarations not allowed in file module-info.java": "compiler.err.no.pkg.in.module-info.java",
    "profile and bootclasspath options cannot be used together": "compiler.err.profile.bootclasspath.conflict",
    "qualified new of static class": "compiler.err.qualified.new.of.static.class",
    "reached end of file while parsing": "compiler.err.premature.eof",
    "receiver parameter not applicable for constructor of top-level class": "compiler.err.receiver.parameter.not.applicable.constructor.toplevel.class",
    "record components cannot have modifiers": "compiler.err.record.cant.declare.field.modifiers",
    "record header expected": "compiler.err.record.header.expected",
    "recursive constructor invocation": "compiler.err.recursive.ctor.invocation",
    "repeated annotation target": "compiler.err.repeated.annotation.target",
    "repeated interface": "compiler.err.repeated.interface",
    "repeated modifier": "compiler.err.repeated.modifier",
    "return outside method": "compiler.err.ret.outside.meth",
    "sealed class must have subclasses": "compiler.err.sealed.class.must.have.subclasses",
    "sealed or non-sealed local classes are not allowed": "compiler.err.sealed.or.non.sealed.local.classes.not.allowed",
    "sealed or non-sealed modifiers expected": "compiler.err.non.sealed.or.sealed.expected",
    "sealed, non-sealed or final modifiers expected": "compiler.err.non.sealed.sealed.or.final.expected",
    "self-reference in initializer": "compiler.err.illegal.self.ref",
    "semicolon missing": "compiler.err.dc.missing.semicolon",
    "service implementation must be defined in the same module as the provides directive": "compiler.err.service.implementation.not.in.right.module",
    "static declarations not allowed in inner classes": "compiler.err.static.declaration.not.allowed.in.inner.classes",
    "static import only from classes and interfaces": "compiler.err.static.imp.only.classes.and.interfaces",
    "static methods cannot be annotated with @Override": "compiler.err.static.methods.cannot.be.annotated.with.override",
    "switch expression completes without providing a value\n(switch expressions must either provide a value or throw for all possible input values)": "compiler.err.switch.expression.completes.normally",
    "switch expression does not have any case clauses": "compiler.err.switch.expression.empty",
    "switch expression does not have any result expressions": "compiler.err.switch.expression.no.result.expressions",
    "switch has both a total pattern and a default label": "compiler.err.total.pattern.and.default",
    "switch rule completes without providing a value\n(switch rules in switch expressions must either provide a value or throw)": "compiler.err.rule.completes.normally",
    "syntax error in reference": "compiler.err.dc.ref.syntax.error",
    'the "provider" method return type must be a subtype of the service interface type': "compiler.err.service.implementation.provider.return.must.be.subtype.of.service.interface",
    'the service implementation type must be a subtype of the service interface type, or have a public static no-args method named "provider" returning the service implementation': "compiler.err.service.implementation.must.be.subtype.of.service.interface",
    "the switch expression does not cover all possible input values": "compiler.err.not.exhaustive",
    "the switch statement does not cover all possible input values": "compiler.err.not.exhaustive.statement",
    "the try-with-resources resource must either be a variable declaration or an expression denoting a reference to a final or effectively final variable": "compiler.err.try.with.resources.expr.needs.var",
    "this case label is dominated by a preceding case label": "compiler.err.pattern.dominated",
    "throws clause not allowed in @interface members": "compiler.err.throws.not.allowed.in.intf.annotation",
    "too many constants": "compiler.err.limit.pool",
    "too many local variables": "compiler.err.limit.locals",
    "too many module declarations found": "compiler.err.too.many.modules",
    "too many parameters": "compiler.err.limit.parameters",
    "type pattern expected": "compiler.err.pattern.expected",
    "unclosed character literal": "compiler.err.unclosed.char.lit",
    "unclosed comment": "compiler.err.unclosed.comment",
    "unclosed string literal": "compiler.err.unclosed.str.lit",
    "unclosed text block": "compiler.err.unclosed.text.block",
    "unexpected content": "compiler.err.dc.unexpected.content",
    "unexpected statement in case, expected is an expression, a block or a throw statement": "compiler.err.switch.case.unexpected.statement",
    "unexpected text": "compiler.err.dc.ref.unexpected.input",
    "unexpected text after parenthesis": "compiler.err.dc.ref.bad.parens",
    "unnamed package is not allowed in named modules": "compiler.err.unnamed.pkg.not.allowed.named.modules",
    "unreachable statement": "compiler.err.unreachable.stmt",
    "unterminated inline tag": "compiler.err.dc.unterminated.inline.tag",
    "unterminated signature": "compiler.err.dc.unterminated.signature",
    "unterminated string": "compiler.err.dc.unterminated.string",
    "varargs notation not allowed on receiver parameter": "compiler.err.varargs.and.receiver",
    "varargs parameter must be the last parameter": "compiler.err.varargs.must.be.last",
    "variable declaration not allowed here": "compiler.err.variable.not.allowed",
    "warnings found and -Werror specified": "compiler.err.warnings.and.werror",
    "wrong receiver parameter name": "compiler.err.wrong.receiver",
    "yield outside of switch expression": "compiler.err.no.switch.expression",
    "yield outside of switch expression\n(to invoke a method called yield, qualify the yield with a receiver or type name)": "compiler.err.no.switch.expression.qualify",
}
